#
# Copyright IBM Corp. All Rights Reserved.
#
# SPDX-License-Identifier: Apache-2.0
#

- name: Check that the MSP directory has been defined
  ansible.builtin.fail:
    msg: "No MSP directory is indicated. Set it via 'fabric_ca_msp_dir'."
  when: fabric_ca_msp_dir is not defined

- name: Check that the Fabric CA identity to enroll has been defined
  ansible.builtin.fail:
    msg: "No Fabric CA identity is indicated. Set it via 'fabric_ca_identity'."
  when: fabric_ca_identity is not defined

- name: Ensure MSP directory exists
  ansible.builtin.file:
    path: "{{ fabric_ca_msp_dir }}"
    state: directory
    mode: "0755"

- name: Check if already enrolled
  ansible.builtin.stat:
    path: "{{ fabric_ca_msp_dir }}/signcerts/cert.pem"
  register: msp_cert

- name: Set volumes for Fabric-CA client
  ansible.builtin.set_fact:
    fabric_ca_volumes:
      - "{{ fabric_ca_msp_dir }}:{{ fabric_ca_container_config_dir }}"
  when:
    - not msp_cert.stat.exists

- name: Set volumes for TLS certificates
  vars:
    fabric_ca_tls_certfile_volume: "{{ fabric_ca_tls_certfile }}:{{ fabric_ca_container_config_dir }}/tls-cert.pem"
  ansible.builtin.set_fact:
    fabric_ca_volumes: "{{ fabric_ca_volumes + [fabric_ca_tls_certfile_volume] }}"
  when:
    - fabric_ca_use_tls
    - fabric_ca_tls_certfile is defined
    - not msp_cert.stat.exists

- name: Enroll identity with Fabric CA client container
  vars:
    container_name: "{{ fabric_ca_name }}-enroll-{{ fabric_ca_identity.name }}"
    container_image: "{{ fabric_ca_image }}"
    container_env:
      FABRIC_CA_CLIENT_HOME: "{{ fabric_ca_container_config_dir }}"
    container_command: >-
      {{ fabric_ca_client_bin_name }} enroll
      -u {{ fabric_ca_scheme }}://{{ fabric_ca_identity.name }}:{{ fabric_ca_identity.secret }}@{{ hostvars[fabric_ca_host].ansible_host }}:{{ hostvars[fabric_ca_host].fabric_ca_port }}
      --caname {{ fabric_ca_name }}
      --mspdir {{ fabric_ca_container_config_dir }}
      {% if fabric_ca_enrollment_profile is defined %}
      --enrollment.profile {{ fabric_ca_enrollment_profile }}
      {% endif %}
      {% if fabric_ca_csr_hosts is defined and (fabric_ca_csr_hosts | length) > 0 %}
      {% for csr_host in fabric_ca_csr_hosts %}
      --csr.hosts {{ csr_host }}
      {% endfor %}
      {% endif %}
      {% if fabric_ca_use_tls and (fabric_ca_tls_certfile is defined) %}
      --tls.certfiles {{ fabric_ca_container_config_dir }}/tls-cert.pem
      {% endif %}
    container_volumes: "{{ fabric_ca_volumes }}"
    container_autoremove: true
    container_run_as_host_user: true
    container_run_detach_mode: false
  ansible.builtin.include_role:
    name: hyperledger.fabricx.container
    tasks_from: start
  when:
    - not msp_cert.stat.exists

- name: Copy NodeOUs configuration file
  ansible.builtin.template:
    src: nodeous-config.yaml.j2
    dest: "{{ fabric_ca_msp_dir }}/config.yaml"
    mode: "0o644"
  when:
    - fabric_ca_enable_nodeous

# TODO: we need to evaluate if we want to go with this path or handle per component locations based on whether they receive material through cryptogen or fabric-ca
- name: Adjust crypto to be as cryptogen produced crypto
  ansible.builtin.include_role:
    name: hyperledger.fabricx.fabric_ca
    tasks_from: client/cryptogenize
