#
# Copyright IBM Corp. All Rights Reserved.
#
# SPDX-License-Identifier: Apache-2.0
#

################################################################################
#
#   ORGANIZATIONS
#
#   This section defines the organizational identities that can be referenced
#   in the configuration profiles.
#
################################################################################
---
Organizations:
{% for orderer_org_domain, orderer_org_info in configtxgen_orderers_by_org.items() %}
  - &{{ orderer_org_info.name }}MSP
    # Name is the key by which this org will be referenced in channel
    # configuration transactions.
    # Name can include alphanumeric characters as well as dots and dashes.
    Name: {{ orderer_org_info.name }}

    # SkipAsForeign can be set to true for org definitions which are to be
    # inherited from the orderer system channel during channel creation.  This
    # is especially useful when an admin of a single org without access to the
    # MSP directories of the other orgs wishes to create a channel.  Note
    # this property must always be set to false for orgs included in block
    # creation.
    SkipAsForeign: false

    # ID is the key by which this org's MSP definition will be referenced.
    # ID can include alphanumeric charaters as well as dots and dashes.
    ID: {{ orderer_org_info.name }}MSP

    # MSPDir is the filesystem path which contains the MSP configuration.
    MSPDir: {{ cryptogen_artifacts_dir }}/crypto/ordererOrganizations/{{ orderer_org_info.domain }}/msp

    # Policies defines the set of policies at this level of the config tree
    # For organization policies, their canonical path is usually
    #   /Channel/<Application|Orderer>/<OrgName>/<PolicyName>
    Policies: &{{ orderer_org_info.name }}Policies
      Readers:
        Type: Signature
        Rule: OR('{{ orderer_org_info.name }}MSP.member')
        # If your MSP is configured with the new NodeOUs, you might
        # want to use a more specific rule like the following:
        # Rule: "OR('SampleOrg.admin', 'SampleOrg.peer', 'SampleOrg.client')"
      Writers:
        Type: Signature
        Rule: OR('{{ orderer_org_info.name }}MSP.member')
        # If your MSP is configured with the new NodeOUs, you might
        # want to use a more specific rule like the following:
        # Rule: "OR('SampleOrg.admin', 'SampleOrg.client')"
      Admins:
        Type: Signature
        Rule: OR('{{ orderer_org_info.name }}MSP.admin')

    # OrdererEndpoints is a list of all orderers this org runs which clients
    # and peers may to connect to to push transactions and receive blocks respectively.
    OrdererEndpoints:
{% for orderer in orderer_org_info.orderers %}
{% if hostvars[orderer.name].orderer_component_type == 'router' %}
      - id={{ hostvars[orderer.name].orderer_group }},broadcast,{{ hostvars[orderer.name].ansible_host }}:{{ hostvars[orderer.name].orderer_rpc_port }}
{% elif hostvars[orderer.name].orderer_component_type == 'assembler' %}
      - id={{ hostvars[orderer.name].orderer_group }},deliver,{{ hostvars[orderer.name].ansible_host }}:{{ hostvars[orderer.name].orderer_rpc_port }}
{% endif %}
{% endfor %}
{% endfor %}
{% for peer_org_domain, peer_org_info in configtxgen_peers_by_org.items() %}
  - &{{ peer_org_info.name }}MSP
    # Name is the key by which this org will be referenced in channel
    # configuration transactions.
    # Name can include alphanumeric characters as well as dots and dashes.
    Name: {{ peer_org_info.name }}

    # ID is the key by which this org's MSP definition will be referenced.
    # ID can include alphanumeric charaters as well as dots and dashes.
    ID: {{ peer_org_info.name }}MSP

{% if peer_org_info.type is defined and peer_org_info.type == 'idemix' %}
    # MSPDir is the filesystem path which contains the MSP configuration.
    MSPDir: {{ idemixgen_artifacts_dir }}/{{ peer_org_info.domain }}
    MSPType: {{ peer_org_info.type }}
{% else %}
    # MSPDir is the filesystem path which contains the MSP configuration.
    MSPDir: {{ cryptogen_artifacts_dir }}/crypto/peerOrganizations/{{ peer_org_info.domain }}/msp
{% endif %}

    # Policies defines the set of policies at this level of the config tree
    # For organization policies, their canonical path is usually
    #   /Channel/<Application|Orderer>/<OrgName>/<PolicyName>
    Policies: &{{ peer_org_info.name }}Policies
      Readers:
        Type: Signature
        Rule: OR('{{ peer_org_info.name }}MSP.member')
        # If your MSP is configured with the new NodeOUs, you might
        # want to use a more specific rule like the following:
        # Rule: "OR('SampleOrg.admin', 'SampleOrg.peer', 'SampleOrg.client')"
      Writers:
        Type: Signature
        Rule: OR('{{ peer_org_info.name }}MSP.member')
        # If your MSP is configured with the new NodeOUs, you might
        # want to use a more specific rule like the following:
        # Rule: "OR('SampleOrg.admin', 'SampleOrg.client')"
      Endorsement:
        Type: Signature
        Rule: OR('{{ peer_org_info.name }}MSP.member')
      Admins:
        Type: Signature
        Rule: OR('{{ peer_org_info.name }}MSP.admin')

    # AnchorPeers defines the location of peers which can be used for
    # cross-org gossip communication.
    #
    # NOTE: this value should only be set when using the deprecated
    # `configtxgen --outputAnchorPeersUpdate` command. It is recommended
    # to instead use the channel configuration update process to set the
    # anchor peers for each organization.
    AnchorPeers:
{% for peer in peer_org_info.peers %}
{% if hostvars[peer.name].sc_rpc_port is defined %}
      - Host: {{ hostvars[peer.name].ansible_host }}
        Port: {{ hostvars[peer.name].sc_rpc_port }}
{% endif %}
{% endfor %}
{% endfor %}

################################################################################
#
#   CAPABILITIES
#
#   This section defines the capabilities of fabric network. This is a new
#   concept as of v1.1.0 and should not be utilized in mixed networks with
#   v1.0.x peers and orderers.  Capabilities define features which must be
#   present in a fabric binary for that binary to safely participate in the
#   fabric network.  For instance, if a new MSP type is added, newer binaries
#   might recognize and validate the signatures from this type, while older
#   binaries without this support would be unable to validate those
#   transactions.  This could lead to different versions of the fabric binaries
#   having different world states.  Instead, defining a capability for a channel
#   informs those binaries without this capability that they must cease
#   processing transactions until they have been upgraded.  For v1.0.x if any
#   capabilities are defined (including a map with all capabilities turned off)
#   then the v1.0.x peer will deliberately crash.
#
################################################################################
Capabilities:
  # Channel capabilities apply to both the orderers and the peers and must be
  # supported by both.
  # Set the value of the capability to true to require it.
  Channel: &ChannelCapabilities
    # V2.0 for Channel is a catchall flag for behavior which has been
    # determined to be desired for all orderers and peers running at the v2.0.0
    # level, but which would be incompatible with orderers and peers from
    # prior releases.
    # Prior to enabling V2.0 channel capabilities, ensure that all
    # orderers and peers on a channel are at v2.0.0 or later.
    V3_0: true

  # Orderer capabilities apply only to the orderers, and may be safely
  # used with prior release peers.
  # Set the value of the capability to true to require it.
  Orderer: &OrdererCapabilities
    # V1.1 for Orderer is a catchall flag for behavior which has been
    # determined to be desired for all orderers running at the v1.1.x
    # level, but which would be incompatible with orderers from prior releases.
    # Prior to enabling V2.0 orderer capabilities, ensure that all
    # orderers on a channel are at v2.0.0 or later.
    V2_0: true

  # Application capabilities apply only to the peer network, and may be safely
  # used with prior release orderers.
  # Set the value of the capability to true to require it.
  Application: &ApplicationCapabilities
    # V2.5 for Application enables the new non-backwards compatible
    # features of fabric v2.5, namely the ability to purge private data.
    # Prior to enabling V2.5 application capabilities, ensure that all
    # peers on a channel are at v2.5.0 or later.
    V2_5: true

################################################################################
#
#   APPLICATION
#
#   This section defines the values to encode into a config transaction or
#   genesis block for application-related parameters.
#
################################################################################
Application: &ApplicationDefaults
  ACLs: &ACLsDefault
    # This section provides defaults for policies for various resources
    # in the system. These "resources" could be functions on system chaincodes
    # (e.g., "GetBlockByNumber" on the "qscc" system chaincode) or other resources
    # (e.g.,who can receive Block events). This section does NOT specify the resource's
    # definition or API, but just the ACL policy for it.
    #
    # Users can override these defaults with their own policy mapping by defining the
    # mapping under ACLs in their channel definition

    #---New Lifecycle System Chaincode (_lifecycle) function to policy mapping for access control--#

    # ACL policy for _lifecycle's "CheckCommitReadiness" function
    _lifecycle/CheckCommitReadiness: /Channel/Application/Writers

    # ACL policy for _lifecycle's "CommitChaincodeDefinition" function
    _lifecycle/CommitChaincodeDefinition: /Channel/Application/Writers

    # ACL policy for _lifecycle's "QueryChaincodeDefinition" function
    _lifecycle/QueryChaincodeDefinition: /Channel/Application/Writers

    # ACL policy for _lifecycle's "QueryChaincodeDefinitions" function
    _lifecycle/QueryChaincodeDefinitions: /Channel/Application/Writers

    #---Lifecycle System Chaincode (lscc) function to policy mapping for access control---#

    # ACL policy for lscc's "getid" function
    lscc/ChaincodeExists: /Channel/Application/Readers

    # ACL policy for lscc's "getdepspec" function
    lscc/GetDeploymentSpec: /Channel/Application/Readers

    # ACL policy for lscc's "getccdata" function
    lscc/GetChaincodeData: /Channel/Application/Readers

    # ACL Policy for lscc's "getchaincodes" function
    lscc/GetInstantiatedChaincodes: /Channel/Application/Readers

    #---Query System Chaincode (qscc) function to policy mapping for access control---#

    # ACL policy for qscc's "GetChainInfo" function
    qscc/GetChainInfo: /Channel/Application/Readers

    # ACL policy for qscc's "GetBlockByNumber" function
    qscc/GetBlockByNumber: /Channel/Application/Readers

    # ACL policy for qscc's  "GetBlockByHash" function
    qscc/GetBlockByHash: /Channel/Application/Readers

    # ACL policy for qscc's "GetTransactionByID" function
    qscc/GetTransactionByID: /Channel/Application/Readers

    # ACL policy for qscc's "GetBlockByTxID" function
    qscc/GetBlockByTxID: /Channel/Application/Readers

    #---Configuration System Chaincode (cscc) function to policy mapping for access control---#

    # ACL policy for cscc's "GetConfigBlock" function
    cscc/GetConfigBlock: /Channel/Application/Readers

    # ACL policy for cscc's "GetChannelConfig" function
    cscc/GetChannelConfig: /Channel/Application/Readers

    #---Miscellaneous peer function to policy mapping for access control---#

    # ACL policy for invoking chaincodes on peer
    peer/Propose: /Channel/Application/Writers

    # ACL policy for chaincode to chaincode invocation
    peer/ChaincodeToChaincode: /Channel/Application/Writers

    #---Events resource to policy mapping for access control###---#

    # ACL policy for sending block events
    event/Block: /Channel/Application/Readers

    # ACL policy for sending filtered block events
    event/FilteredBlock: /Channel/Application/Readers

  # Organizations lists the orgs participating on the application side of the
  # network.
  Organizations:
{% for peer_org_domain, peer_org_info in configtxgen_peers_by_org.items() %}
    - *{{ peer_org_info.name }}MSP
{% endfor %}

  # Policies defines the set of policies at this level of the config tree
  # For Application policies, their canonical path is
  #   /Channel/Application/<PolicyName>
  Policies:
    Readers:
      Type: ImplicitMeta
      Rule: ANY Readers
    Writers:
      Type: ImplicitMeta
      Rule: ANY Writers
    Admins:
      Type: ImplicitMeta
      Rule: ANY Admins
    Endorsement:
      Type: ImplicitMeta
      Rule: ANY Endorsement
    LifecycleEndorsement:
{% if configtxgen_peers_by_org.items() | length > 0 %}
      Type: Signature
      Rule: >
        OR (
{% for peer_org_domain, peer_org_info in configtxgen_peers_by_org.items() %}
        '{{ peer_org_info.name }}MSP.member'{% if not loop.last %},{% endif +%}
{% endfor %}
        )
{% else %}
      Type: ImplicitMeta
      Rule: ANY Admins
{% endif %}

  # Capabilities describes the application level capabilities, see the
  # dedicated Capabilities section elsewhere in this file for a full
  # description
  Capabilities:
    <<: *ApplicationCapabilities

################################################################################
#
#   ORDERER
#
#   This section defines the values to encode into a config transaction or
#   genesis block for orderer related parameters.
#
################################################################################
Orderer: &OrdererDefaults
  # Orderer Type: The orderer implementation to start.
  # Available types are "BFT" and "etcdraft".
  OrdererType: arma

  # Batch Timeout: The amount of time to wait before creating a batch.
  BatchTimeout: 500ms

  # Batch Size: Controls the number of messages batched into a block.
  # The orderer views messages opaquely, but typically, messages may
  # be considered to be Fabric transactions.  The 'batch' is the group
  # of messages in the 'data' field of the block.  Blocks will be a few kb
  # larger than the batch size, when signatures, hashes, and other metadata
  # is applied.
  BatchSize:
    # Max Message Count: The maximum number of messages to permit in a
    # batch.  No block will contain more than this number of messages.
    MaxMessageCount: 3500

    # Absolute Max Bytes: The absolute maximum number of bytes allowed for
    # the serialized messages in a batch. The maximum block size is this value
    # plus the size of the associated metadata (usually a few KB depending
    # upon the size of the signing identities). Any transaction larger than
    # this value will be rejected by ordering.
    # It is recommended not to exceed 49 MB, given the default grpc max message size of 100 MB
    # configured on orderer and peer nodes (and allowing for message expansion during communication).
    AbsoluteMaxBytes: 16 MB

    # Preferred Max Bytes: The preferred maximum number of bytes allowed
    # for the serialized messages in a batch. Roughly, this field may be considered
    # the best effort maximum size of a batch. A batch will fill with messages
    # until this size is reached (or the max message count, or batch timeout is
    # exceeded).  If adding a new message to the batch would cause the batch to
    # exceed the preferred max bytes, then the current batch is closed and written
    # to a block, and a new batch containing the new message is created.  If a
    # message larger than the preferred max bytes is received, then its batch
    # will contain only that message.  Because messages may be larger than
    # preferred max bytes (up to AbsoluteMaxBytes), some batches may exceed
    # the preferred max bytes, but will always contain exactly one transaction.
    PreferredMaxBytes: 4 MB

  # Max Channels is the maximum number of channels to allow on the ordering
  # network. When set to 0, this implies no maximum number of channels.
  MaxChannels: 0

  # SmartBFT defines configuration which must be set when the "BFT"
  # orderertype is chosen.
  SmartBFT:
    # The maximal number of requests in a batch.
    # A request batch that reaches this count is proposed immediately.
    RequestBatchMaxCount: 8000

    # The maximal total size of requests in a batch, in bytes.
    # This is also the maximal size of a single request.
    # A request batch that reaches this size is proposed immediately.
    RequestBatchMaxBytes: 99999999999999

    # The maximal time interval a request batch can wait before it is proposed.
    # A request batch is accumulating requests until RequestBatchMaxInterval had
    # elapsed from the time the batch was first created (i.e. the time the first
    # request was added to it), or until it is of count RequestBatchMaxCount,
    # or it reaches RequestBatchMaxBytes, whichever occurs first.
    RequestBatchMaxInterval: 100ms

    # The size of the buffer holding incoming messages before they are
    # processed (maximal number of messages).
    IncomingMessageBufferSize: 200

    # The number of pending requests retained by the node. The RequestPoolSize is
    # recommended to be at least double (x2) the RequestBatchMaxCount. This cannot
    # be changed dynamically and the node must be restarted to pick up the change.
    RequestPoolSize: 500000

    # Is started from the moment a request is submitted, and defines the interval
    # after which a request is forwarded to the leader.
    RequestForwardTimeout: 2s

    # Is started when RequestForwardTimeout expires, and defines the interval after
    # which the node complains about the view leader.
    RequestComplainTimeout: 20s

    # Is started when RequestComplainTimeout expires, and defines the interval after
    # which a request is removed (dropped) from the request pool.
    RequestAutoRemoveTimeout: 3m0s

    # Defines the interval after which the ViewChange message is resent.
    ViewChangeResendInterval: 5s

    # Is started when a node first receives a quorum of ViewChange messages, and defines
    # the interval after which the node will try to initiate a view change with a higher view number.
    ViewChangeTimeout: 20s

    # Is the interval after which, if nodes do not receive a “sign of life” from the leader,
    # they complain about the current leader and try to initiate a view change.
    # A sign of life is either a heartbeat or a message from the leader.
    LeaderHeartbeatTimeout: 1m0s

    # Is the number of heartbeats per LeaderHeartbeatTimeout that the leader should emit.
    # The heartbeat-interval is equal to: LeaderHeartbeatTimeout/LeaderHeartbeatCount.
    LeaderHeartbeatCount: 10

    # Is the interval after which the node stops listening to StateTransferResponse messages,
    # stops collecting information about view metadata from remote nodes.
    CollectTimeout: 1s

  # ConsenterMapping contains the definition of consenter identity, endpoints, and crypto material.
  # The ConsenterMapping is used in the BFT consensus protocol, and should include enough servers to ensure
  # fault-tolerance; In BFT this number is at least 3*F+1, where F is the number of potential failures.
  # In BFT it is highly recommended that the addresses for delivery & broadcast (the OrdererEndpoints item in the
  # org definition) map 1:1 to the Orderer/ConsenterMapping (for cluster consensus). That is, every consenter should
  # be represented by a delivery endpoint. Note that in BFT (V3) global Orderer/Addresses are no longer supported.
  ConsenterMapping:
{% for orderer_org_domain, orderer_org_info in configtxgen_orderers_by_org.items() %}
{% for orderer in orderer_org_info.orderers %}
{% if hostvars[orderer.name].orderer_component_type == 'consenter' %}
    - ID: {{ hostvars[orderer.name].orderer_group }}
      Host: {{ hostvars[orderer.name].ansible_host }}
      Port: {{ hostvars[orderer.name].orderer_rpc_port }}
      MSPID: {{ orderer_org_info.name }}MSP
      Identity: {{ cryptogen_artifacts_dir }}/crypto/ordererOrganizations/{{ orderer_org_info.domain }}/orderers/{{ orderer.name }}.{{ orderer_org_info.domain }}/msp/signcerts/{{ orderer.name }}.{{ orderer_org_info.domain }}-cert.pem
      ClientTLSCert: {{ cryptogen_artifacts_dir }}/crypto/ordererOrganizations/{{ orderer_org_info.domain }}/orderers/{{ orderer.name }}.{{ orderer_org_info.domain }}/tls/server.crt
      ServerTLSCert: {{ cryptogen_artifacts_dir }}/crypto/ordererOrganizations/{{ orderer_org_info.domain }}/orderers/{{ orderer.name }}.{{ orderer_org_info.domain }}/tls/server.crt
{% endif %}
{% endfor %}
{% endfor %}

  # Organizations lists the orgs participating on the orderer side of the
  # network.
  Organizations:
{% for orderer_org_domain, orderer_org_info in configtxgen_orderers_by_org.items() %}
    - *{{ orderer_org_info.name }}MSP
{% endfor %}

  # Policies defines the set of policies at this level of the config tree
  # For Orderer policies, their canonical path is
  #   /Channel/Orderer/<PolicyName>
  Policies:
    Readers:
      Type: ImplicitMeta
      Rule: ANY Readers
    Writers:
      Type: ImplicitMeta
      Rule: ANY Writers
    Admins:
      Type: ImplicitMeta
      Rule: MAJORITY Admins
    # BlockValidation specifies what signatures must be included in the block
    # from the orderer for the peer to validate it.
    BlockValidation:
      Type: ImplicitMeta
      Rule: ANY Writers

  # Capabilities describes the orderer level capabilities, see the
  # dedicated Capabilities section elsewhere in this file for a full
  # description
  Capabilities:
    <<: *OrdererCapabilities

################################################################################
#
#   CHANNEL
#
#   This section defines the values to encode into a config transaction or
#   genesis block for channel related parameters.
#
################################################################################
Channel: &ChannelDefaults
  # Policies defines the set of policies at this level of the config tree
  # For Channel policies, their canonical path is
  #   /Channel/<PolicyName>
  Policies: &DefaultPolicies
    # Who may invoke the 'Deliver' API
    Readers:
      Type: ImplicitMeta
      Rule: ANY Readers
    # Who may invoke the 'Broadcast' API
    Writers:
      Type: ImplicitMeta
      Rule: ANY Writers
    # By default, who may modify elements at this config level
    Admins:
      Type: ImplicitMeta
      Rule: MAJORITY Admins

  # Capabilities describes the channel level capabilities, see the
  # dedicated Capabilities section elsewhere in this file for a full
  # description
  Capabilities:
    <<: *ChannelCapabilities

################################################################################
#
#   PROFILES
#
#   Different configuration profiles may be encoded here to be specified as
#   parameters to the configtxgen tool. The profiles which specify consortiums
#   are to be used for generating the orderer genesis block. With the correct
#   consortium members defined in the orderer genesis block, channel creation
#   requests may be generated with only the org member names and a consortium
#   name.
#
################################################################################
Profiles:
  {{ configtxgen_profile_id }}:
    <<: *ChannelDefaults
    Orderer:
      <<: *OrdererDefaults
      Arma:
        Path: {{ armageddon_artifacts_dir }}/{{ configtxgen_armageddon_binpb_file }}
    Consortium: SampleConsortium
    Application:
      <<: *ApplicationDefaults
{% if configtxgen_meta_namespace_admin is defined %}
      MetaNamespaceVerificationKeyPath: {{ cryptogen_artifacts_dir }}/crypto/peerOrganizations/{{ configtxgen_meta_namespace_admin.organization.domain }}/users/{{ configtxgen_meta_namespace_admin.name }}@{{ configtxgen_meta_namespace_admin.organization.domain }}/msp/signcerts/{{ configtxgen_meta_namespace_admin.name }}@{{ configtxgen_meta_namespace_admin.organization.domain }}-cert.pem
{% endif %}
