#
# Copyright IBM Corp. All Rights Reserved.
#
# SPDX-License-Identifier: Apache-2.0
#

- name: Check that the meta namespace admin MSP path is defined
  ansible.builtin.fail:
    msg: "No path to the meta namespace admin MSP is indicated. Set it via 'fxconfig_msp_config_path'."
  when:
    - fxconfig_msp_config_path is not defined

- name: Map the container output volume
  ansible.builtin.set_fact:
    fxconfig_volumes:
      - "{{ fxconfig_msp_config_path }}:/tmp/meta_namespace_admin_msp"

- name: Add the endorser public key certificate path as volume to mount
  vars:
    endorser_pubkey_volume: "{{ fxconfig_pubkey_path }}:/tmp/endorser_pub_key.cert"
  ansible.builtin.set_fact:
    fxconfig_volumes: "{{ fxconfig_volumes + [endorser_pubkey_volume] }}"
  when:
    - fxconfig_pubkey_path is defined

- name: Add the CA certificate path as volume to mount
  vars:
    ca_volume: "{{ fxconfig_cafile_path }}:/tmp/ca.cert"
  ansible.builtin.set_fact:
    fxconfig_volumes: "{{ fxconfig_volumes + [ca_volume] }}"
  when:
    - fxconfig_cafile_path is defined

- name: Create namespace {{ fxconfig_namespace }}
  vars:
    container_name: "{{ fxconfig_container_name }}-{{ fxconfig_namespace }}-create"
    container_image: "{{ fxconfig_image }}"
    container_command: >-
      {{ fxconfig_container_name }} namespace
      create {{ fxconfig_namespace }}
      --channel {{ channel_id }}
      --orderer {{ hostvars[orderer_router_host].ansible_host }}:{{ hostvars[orderer_router_host].orderer_rpc_port }}
      --mspConfigPath /tmp/meta_namespace_admin_msp
      --mspID {{ fxconfig_msp_id }}
      {% if fxconfig_pubkey_path is defined %}
      --pk /tmp/endorser_pub_key.cert
      {% endif %}
      {% if fxconfig_cafile_path is defined %}
      --cafile /tmp/ca.cert
      {% endif %}
      {% if fxconfig_use_tls %}
      --tls
      {% endif %}
    container_volumes: "{{ fxconfig_volumes }}"
    container_run_detach_mode: false
    container_run_as_host_user: true
    container_autoremove: true
  ansible.builtin.include_role:
    name: hyperledger.fabricx.container
    tasks_from: start

- name: Wait until the namespace {{ fxconfig_namespace }} is created
  vars:
    container_run_until: >-
      {{
        fxconfig_namespace in (
            docker_result.container.Output
            if container_client == 'docker'
            else (result.stdout_lines | join('\n'))
        )
      }}
    container_run_retries: 60
    container_run_delay: 2
  ansible.builtin.include_role:
    name: hyperledger.fabricx.fxconfig
    tasks_from: container/namespace_list
