- name: Enroll orderer identity (assembler)
  vars:
    scheme: "{{ 'https' if (hostvars[organization.fabric_ca_host].fabric_ca_use_tls | default(false)) else 'http' }}"
    current_user: "{{ organization.user }}"
    fabric_ca_url: >-
      {{ scheme }}://{{ current_user.name }}:{{ current_user.secret }}@{{ hostvars[organization.fabric_ca_host].ansible_host }}:{{ hostvars[organization.fabric_ca_host].fabric_ca_port }}
    fabric_ca_msp_dir: "{{ orderer_remote_config_dir }}/msp"
    fabric_ca_ca_name: "{{ hostvars[organization.fabric_ca_host].fabric_ca_ca_name | default(organization.fabric_ca_host) }}"
    fabric_ca_ca_host: "{{ organization.fabric_ca_host }}"
    fabric_ca_tls_source_file: "{{ deploy_dir }}/{{ organization.fabric_ca_host }}/tls-cert.pem"
    fabric_ca_identity:
      name: "{{ current_user.name }}"
      secret: "{{ current_user.secret }}"
      type: orderer
  ansible.builtin.include_role:
    name: ibm.fabricx.fabric_ca
    tasks_from: client/docker/enroll_identity
  when:
    - organization is defined
    - organization.role | default('') == 'orderer'
    - organization.user is defined
    - organization.user.name is defined
    - organization.user.secret is defined
    - organization.fabric_ca_host is defined

- name: Enroll orderer TLS MSP
  vars:
    scheme: "{{ 'https' if (hostvars[organization.fabric_ca_host].fabric_ca_use_tls | default(false)) else 'http' }}"
    current_user: "{{ organization.user }}"
    fabric_ca_url: >-
      {{ scheme }}://{{ current_user.name }}:{{ current_user.secret }}@{{ hostvars[organization.fabric_ca_host].ansible_host }}:{{ hostvars[organization.fabric_ca_host].fabric_ca_port }}
    fabric_ca_ca_name: "{{ hostvars[organization.fabric_ca_host].fabric_ca_ca_name | default(organization.fabric_ca_host) }}"
    fabric_ca_ca_host: "{{ organization.fabric_ca_host }}"
    fabric_ca_tls_source_file: "{{ deploy_dir }}/{{ organization.fabric_ca_host }}/tls-cert.pem"
    fabric_ca_identity:
      name: "{{ current_user.name }}"
      secret: "{{ current_user.secret }}"
      type: orderer
    fabric_ca_msp_dir: "{{ orderer_remote_config_dir }}/tls-msp"
    fabric_ca_enrollment_profile: "tls"               
    fabric_ca_csr_hosts:                              
      - "{{ inventory_hostname }}.{{ organization.domain }}"
      - "{{ hostvars[organization.fabric_ca_host].ansible_host }}"
  ansible.builtin.include_role:
    name: ibm.fabricx.fabric_ca
    tasks_from: client/docker/enroll_identity
  when:
    - organization is defined
    - organization.role | default('') == 'orderer'
    - organization.user is defined
    - organization.user.name is defined
    - organization.user.secret is defined
    - organization.fabric_ca_host is defined

- name: Ensure local artifact dir for this orderer exists
  ansible.builtin.file:
    path: >-
      {{ orderer_cryptogen_artifact_dir }}/crypto/ordererOrganizations/{{ organization.domain }}/orderers/{{ inventory_hostname }}.{{ organization.domain }}/
    state: directory
    mode: "0o755"

- name: Ensure orderer tls/ exists (cryptogen)
  ansible.builtin.file:
    path: >-
      {{ orderer_cryptogen_artifact_dir }}/crypto/ordererOrganizations/{{ organization.domain }}/orderers/{{ inventory_hostname }}.{{ organization.domain }}/tls
    state: directory
    mode: "0755"

- name: Locate orderer TLS files on node (tls-msp)
  ansible.builtin.find:
    paths: "{{ orderer_remote_config_dir }}/tls-msp"
    recurse: true
    patterns: "*"
  register: _orderer_tls_find

- name: Validate TLS files exist (signcerts, keystore, tlscacerts)
  vars:
    _files: "{{ _orderer_tls_find.files | map(attribute='path') | list }}"
    cert_file: "{{ (_files | select('search','/signcerts/')  | list | first) }}"
    key_file:  "{{ (_files | select('search','/keystore/')   | list | first) }}"
    ca_file:   "{{ (_files | select('search','/tlscacerts/') | list | first) }}"
  ansible.builtin.fail:
    msg: "TLS enroll incomplete for {{ inventory_hostname }}: missing one of signcerts/, keystore/, tlscacerts/ under tls-msp."
  when: not (cert_file and key_file and ca_file)

- name: Fetch TLS cert as server.crt
  vars:
    cert_file: "{{ (_orderer_tls_find.files | map(attribute='path') | select('search','/signcerts/')  | list | first) }}"
    dst: >-
      {{ orderer_cryptogen_artifact_dir }}/crypto/ordererOrganizations/{{ organization.domain }}/orderers/{{ inventory_hostname }}.{{ organization.domain }}/tls/server.crt
  ansible.builtin.fetch:
    src: "{{ cert_file }}"
    dest: "{{ dst }}"
    flat: true

- name: Fetch TLS key as server.key
  vars:
    key_file: "{{ (_orderer_tls_find.files | map(attribute='path') | select('search','/keystore/')   | list | first) }}"
    dst: >-
      {{ orderer_cryptogen_artifact_dir }}/crypto/ordererOrganizations/{{ organization.domain }}/orderers/{{ inventory_hostname }}.{{ organization.domain }}/tls/server.key
  ansible.builtin.fetch:
    src: "{{ key_file }}"
    dest: "{{ dst }}"
    flat: true

- name: Fetch TLS CA as ca.crt
  vars:
    ca_file: "{{ (_orderer_tls_find.files | map(attribute='path') | select('search','/tlscacerts/') | list | first) }}"
    dst: >-
      {{ orderer_cryptogen_artifact_dir }}/crypto/ordererOrganizations/{{ organization.domain }}/orderers/{{ inventory_hostname }}.{{ organization.domain }}/tls/ca.crt
  ansible.builtin.fetch:
    src: "{{ ca_file }}"
    dest: "{{ dst }}"
    flat: true

# Ensure org-level tlsca/ exists (cryptogen-style)
- name: Ensure orderer org tlsca/ directory exists
  ansible.builtin.file:
    path: "{{ orderer_cryptogen_artifact_dir }}/crypto/ordererOrganizations/{{ organization.domain }}/tlsca"
    state: directory
    mode: "0755"

# Copy TLS CA (from this node's tls/ca.crt) into org-level tlsca/tlsca.<org>-cert.pem
- name: Materialize orderer org TLS CA cert to cryptogen-style path
  vars:
    _node_tls_ca: >-
      {{ orderer_cryptogen_artifact_dir }}/crypto/ordererOrganizations/{{ organization.domain }}/orderers/{{ inventory_hostname }}.{{ organization.domain }}/tls/ca.crt
    _dest_tls_ca: >-
      {{ orderer_cryptogen_artifact_dir }}/crypto/ordererOrganizations/{{ organization.domain }}/tlsca/tlsca.{{ organization.domain }}-cert.pem
  ansible.builtin.copy:
    src: "{{ _node_tls_ca }}"
    dest: "{{ _dest_tls_ca }}"
    mode: "0644"
    remote_src: false
    force: false   # first writer wins; others skip if file already present

- name: Fetch enrolled orderer MSP to local artifacts
  ansible.posix.synchronize:
    src: "{{ orderer_remote_config_dir }}/"
    dest: >-
      {{ orderer_cryptogen_artifact_dir }}/crypto/ordererOrganizations/{{ organization.domain }}/orderers/{{ inventory_hostname }}.{{ organization.domain }}
    mode: pull
    rsync_opts:
      - "--exclude=keystore/*"
      - "--exclude=tls-msp/*"

# Compute where the MSP landed locally
- name: Compute local orderer MSP dir (cryptogen)
  ansible.builtin.set_fact:
    _orderer_msp_dir: >-
      {{ orderer_cryptogen_artifact_dir }}/crypto/ordererOrganizations/{{ organization.domain }}/orderers/{{ inventory_hostname }}.{{ organization.domain }}/msp

# Ensure org-level ca/ exists (cryptogen-style)
- name: Ensure orderer org ca/ directory exists
  ansible.builtin.file:
    path: "{{ orderer_cryptogen_artifact_dir }}/crypto/ordererOrganizations/{{ organization.domain }}/ca"
    state: directory
    mode: "0755"

# Copy one CA cert from this orderer's MSP into org-level ca/ca.<org>-cert.pem
- name: Materialize orderer org CA cert to cryptogen-style path
  vars:
    _src_list: "{{ lookup('ansible.builtin.fileglob', _orderer_msp_dir ~ '/cacerts/*.pem', wantlist=True) }}"
    _src_file: "{{ (_src_list | sort | first) | default('') }}"
    _dest_file: "{{ orderer_cryptogen_artifact_dir }}/crypto/ordererOrganizations/{{ organization.domain }}/ca/ca.{{ organization.domain }}-cert.pem"
  ansible.builtin.copy:
    src: "{{ _src_file }}"
    dest: "{{ _dest_file }}"
    mode: "0644"
    remote_src: false
    force: false
  when:
    - _orderer_msp_dir is defined
    - _src_file | length > 0

# --- NEW: org-level MSP for configtxgen (orderer org) -----------------------
# Ensure org-level MSP dirs exist
- name: Ensure orderer org MSP directories exist (cacerts & tlscacerts)
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    mode: "0755"
  loop:
    - "{{ orderer_cryptogen_artifact_dir }}/crypto/ordererOrganizations/{{ organization.domain }}/msp"
    - "{{ orderer_cryptogen_artifact_dir }}/crypto/ordererOrganizations/{{ organization.domain }}/msp/cacerts"
    - "{{ orderer_cryptogen_artifact_dir }}/crypto/ordererOrganizations/{{ organization.domain }}/msp/tlscacerts"

# Put the SIGNING CA into msp/cacerts
- name: Populate orderer org MSP cacerts from org ca
  ansible.builtin.copy:
    src: "{{ orderer_cryptogen_artifact_dir }}/crypto/ordererOrganizations/{{ organization.domain }}/ca/ca.{{ organization.domain }}-cert.pem"
    dest: "{{ orderer_cryptogen_artifact_dir }}/crypto/ordererOrganizations/{{ organization.domain }}/msp/cacerts/ca.{{ organization.domain }}-cert.pem"
    mode: "0644"
    remote_src: false
    force: false

# Put the TLS CA into msp/tlscacerts
- name: Populate orderer org MSP tlscacerts from org tlsca
  ansible.builtin.copy:
    src: "{{ orderer_cryptogen_artifact_dir }}/crypto/ordererOrganizations/{{ organization.domain }}/tlsca/tlsca.{{ organization.domain }}-cert.pem"
    dest: "{{ orderer_cryptogen_artifact_dir }}/crypto/ordererOrganizations/{{ organization.domain }}/msp/tlscacerts/tlsca.{{ organization.domain }}-cert.pem"
    mode: "0644"
    remote_src: false
    force: false

# If cert.pem exists, duplicate it with the cryptogen-style name <fqdn>-cert.pem
- name: Ensure signcert has cryptogen-style filename
  ansible.builtin.copy:
    src: "{{ _orderer_msp_dir }}/signcerts/cert.pem"
    dest: "{{ _orderer_msp_dir }}/signcerts/{{ inventory_hostname }}.{{ organization.domain }}-cert.pem"
    mode: "0644"
    remote_src: false
  when: 
    - _orderer_msp_dir is defined